using Microsoft.AspNetCore.Identity;
using Microsoft.Dynamics365.UIAutomation.Api;
using Microsoft.Dynamics365.UIAutomation.Api.UCI;
using Microsoft.Dynamics365.UIAutomation.Browser;
using Microsoft.Dynamics365.UIAutomation.TDC.Utils;
using System.Text.RegularExpressions;
using TechTalk.SpecFlow;
using TechTalk.SpecFlow.Assist;
using TechTalk.SpecFlow.Infrastructure;
using static Microsoft.Dynamics365.UIAutomation.Api.UCI.AppReference.Entity;

namespace Microsoft.Dynamics365.UIAutomation.TDC.StepDefinitions
{

    /// <summary>
    /// Step Definitions for setting, getting and checking the data in D365 Business Central forms.
    /// </summary>
    [Binding]
    public class EntityStepDefinitions : BaseStepDefinitions
    {
        private readonly ScenarioContext _scenarioContext;
        private readonly FeatureContext _featureContext;
        private readonly ISpecFlowOutputHelper _specFlowOutputHelper;
        private readonly string? _bcemailrecipient = TestSettings.BcEmailRecipient;

        public EntityStepDefinitions(ScenarioContext scenarioContext, FeatureContext featureContext, ISpecFlowOutputHelper specFlowOutputHelper)
        {
            _scenarioContext = scenarioContext;
            _featureContext = featureContext;
            _specFlowOutputHelper = specFlowOutputHelper;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user searches for page 'Purchase Invoices'
        /// </example>
        /// <param name="searchValue"></param>
        [StepDefinition(@".*er searches for page '([^']*)'")]
        public void GivenUserSearchesFor(string searchValue)
        {
            XrmApp.BusinessCentral.SearchForPage(searchValue);
        }

        [StepDefinition(@".*er searches for page '([^']*)' under '([^']*)'")]
        public void WhenUserSearchesForPageUnder(string keyword, string type)
        {
            XrmApp.BusinessCentral.SearchForPageWithType(keyword, type);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user creates a new 'Purchase Invoice'
        /// </example>
        [StepDefinition(@"user creates a new '.*?'")]
        public void WhenUserCreatesANew()
        {
            XrmApp.BusinessCentral.New();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user triggers autocompletion in section 'General' for field 'No.'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        [StepDefinition(@"user triggers autocompletion in section '([^']*)' for field '([^']*)'")]
        public void WhenUserTriggersAutocompletionForField(string sectionName, string fieldName)
        {
            var AutogeneratedValue = XrmApp.BusinessCentral.AutocompleteField(sectionName, fieldName);
            _specFlowOutputHelper.WriteLine($"AutogeneratedValue: {AutogeneratedValue}");
            _scenarioContext.Add("AutogeneratedValue", AutogeneratedValue);
        }

        /// <summary>
        /// In the specified section, set the field with the provided value.
        /// </summary>
        /// <example>
        /// When user enters in section 'General' into field 'Vendor No.' value 'V1912'
        /// When user tries to enter in section 'General' into field 'Cost centre Code' value 'ADM'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldValue"></param>
        [StepDefinition(@"*?er tries to enter in section '([^']*)' into field '([^']*)' value '([^']*)'")]
        [StepDefinition(@"*?er enters in section '([^']*)' into field '([^']*)' value '([^']*)'")]
        public void WhenUserEntersInSectionIntoRecordFieldValue(string sectionName, string fieldName, string fieldValue)
        {
            if (fieldValue.Equals("Random"))
            {
                long timestamp = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;
                string generatedValue = timestamp.ToString().Substring(6); // Use last 10 digits of timestamp
                XrmApp.BusinessCentral.SetField(sectionName, fieldName, generatedValue);
            }
            else
            {
            var processedValue = ResolveTestData(fieldName, fieldValue);
            XrmApp.BusinessCentral.SetField(sectionName, fieldName, processedValue);
            }
        }

        [StepDefinition(@"user appends in section '([^']*)' into field '([^']*)' value '([^']*)'")]
        public void WhenUserAppendsInSectionIntoFieldValue(string sectionName, string fieldName, string fieldValue)
        {
            XrmApp.BusinessCentral.AppendInputField(sectionName, fieldName, fieldValue);
        }

        /// <summary>
        /// In the specified section, set the field with the value from a different field.
        /// </summary>
        /// <example>
        /// When user enters in section 'General' into field 'Statement Ending Balance' value from field 'Total Balance'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="targetFieldName"></param>
        /// <param name="sourceFieldName"></param>
        [When(@"user enters in section '([^']*)' into field '([^']*)' value from field '([^']*)'")]
        public void ThenUserEntersInSectionIntoFieldValueFromField(string sectionName, string targetFieldName, string sourceFieldName)
        {
            string SourceFieldValue = XrmApp.BusinessCentral.GetField(sourceFieldName);
            _specFlowOutputHelper.WriteLine($"SourceFieldValue: {SourceFieldValue}");
            XrmApp.BusinessCentral.SetField(sectionName, targetFieldName, SourceFieldValue);
        }

        /// <summary>
        /// Click the link in the specified section and field.
        /// </summary>
        /// <example>
        /// When user opens a link from the section 'Inventory' field 'Inventory'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        [StepDefinition(@"user opens a link from the section '([^']*)' field '([^']*)'")]
        public void WhenUserOpensLinkFromSectionField(string sectionName, string fieldName)
        {
            XrmApp.BusinessCentral.ClickLinkInField(sectionName, fieldName);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user opens a link from line '1' column 'Balance'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        [When(@"user opens a link from line '([^']*)' column '([^']*)'")]
        public void WhenUserOpensALinkFromLineColumn(int lineNumber, string columnName)
        {
            string LineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);
            XrmApp.BusinessCentral.OpenRecord(LineFieldValue);
        }


        /// <param name="lineFields"></param>
        [StepDefinition(@"user (?:creates|enters) a '[^']*?' line field:")]
        [StepDefinition(@"user (?:creates|enters) '[^']*?' line fields:")]
        public void ThenUserCreatesALine(Table lineFields)
        {
            XrmApp.BusinessCentral.UnfoldSection("Lines");

            if (lineFields.Rows.Count > 1)
                XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Enter focus mode for this part");

            foreach (var line in lineFields.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in lineFields.Header)
                {
                    var LineValue = ResolveTestData(header, line.Value[header]);
                        XrmApp.BusinessCentral.SetLineField(line.Index + 1, header, LineValue);
                }
            }
            XrmApp.ThinkTime(1000); //give BC time to autopopulate fields
            XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Exit focus mode");
        }

        [When(@"user overwrites '([^']*)' with '([^']*)' for each line")]
        public void WhenUserOverwritesWithForEachLine(string columnName, string value)
        {
            var totalLines = XrmApp.BusinessCentral.GetNumberOfLines();
            var LineValue = ResolveTestData(columnName, value);
            for (var line = 1; line <= totalLines; line++)
            {
                var currentValue = XrmApp.BusinessCentral.GetLineField(line, columnName);
                if (currentValue != LineValue)
                {
                    XrmApp.BusinessCentral.SetLineField(line, columnName, LineValue);
                }
            }
        }

        [When(@"user enters F8 in FSL ID to copy value")]
        public void WhenUserEntersFInFSLIDToCopyValue()
        {
            XrmApp.BusinessCentral.EnterF8InFieldToCopyValueFSLID();
        }

        [When(@"user copies '([^']*)' value in line '([^']*)' using F8 key")]
        public void WhenUserCopiesValueInLineUsingF8Key(string columnName, int line)
        {
            if (line > 1)
                XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Enter focus mode for this part");
            XrmApp.BusinessCentral.SetLineField(line, columnName, "Keys.F8");
        }

        [When(@"user enters details in GIS Addresses")]
        public void WhenUserEntersDetailsInGISAddresses(Table table)
        {
            foreach (var line in table.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in table.Header)
                {
                    XrmApp.BusinessCentral.EnterDetailsInGISAddresses(header, line.Value[header]);
                }
            }
            XrmApp.ThinkTime(1000); //give BC time to autopopulate fields

        }

        [StepDefinition(@"user selects the first entry in GIS Addresses")]
        public void WhenUserSelectsTheFirstEntryInGISAddresses()
        {
            XrmApp.BusinessCentral.selectFirstEntryInGSIAddresses();
        }

        /// <param name="lineFields"></param>
        /// <param name="rowNum"></param>
        [When(@"user enter the following details '[^']*?' line field: (\d+)")]
        public void WhenUserCreatesALineFieldOnLine(int rowNum, Table lineFields)
        {
            //expand if line > 1
            foreach (var line in lineFields.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in lineFields.Header)
                {
                    XrmApp.BusinessCentral.SetLineField(line.Index + rowNum, header, line.Value[header]);

                }
            }
            XrmApp.ThinkTime(1000);
            XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Exit focus mode");
        }

        [When(@"user enters an additional description '([^']*)' in line '([^']*)'")]
        public void WhenUserEntersAnAdditionalDescriptionInLine(string description, string line)
        {
            int lineNumber = int.Parse(line);
            XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Enter focus mode for this part");
            XrmApp.BusinessCentral.SetLineField(lineNumber, "Type", "G/L Account");
            XrmApp.BusinessCentral.SetLineField(lineNumber, "No.", "");
            XrmApp.BusinessCentral.SetAdditionalLineComment(line, "Comment");
            XrmApp.BusinessCentral.SetLineField(lineNumber, "Description", description);
            XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Exit focus mode");
        }

        [StepDefinition(@"user enters the following details in Lines table")]
        public void UserEnterTheFollowingDetailsInLineTable(Table lineFields)
        {
            foreach (var line in lineFields.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in lineFields.Header)
                {
                    XrmApp.BusinessCentral.SendKeyLineField(header, line.Value[header]);
                }
            }
            XrmApp.ThinkTime(1000);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user creates a new 'Purchase Order' line:
        /// | Type |
        /// | Item |
        /// </example>
        /// <param name="lineFields"></param>
        [StepDefinition(@"user creates a new '[^']*?' line:")]
        [StepDefinition(@"user creates new '[^']*?' lines:")]
        public void ThenUserCreatesANewLine(Table lineFields)
        {
            var ActualNumberOfLines = XrmApp.BusinessCentral.GetNumberOfLines();
            foreach (var line in lineFields.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in lineFields.Header)
                {
                    var NewLineIndex = line.Index + 1 + ActualNumberOfLines;
                    XrmApp.BusinessCentral.SetLineField(NewLineIndex, header, line.Value[header]);
                }
            }
            XrmApp.ThinkTime(1000); 
        }

        [StepDefinition(@"user clicks ellipsis field: '([^']*)'")]
        public void WhenUserClicksEllipsisField(string fieldName)
        {
            XrmApp.BusinessCentral.clickEllipsis(fieldName);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user changes a 'Sales Credit Memo' line '1' field 'Description' value to 'Credit for Invoice No. PSI00022312'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="lineFieldName"></param>
        /// <param name="lineFieldValue"></param>
        [When(@"user changes a '[^']*?' line '([^']*)' field '([^']*)' value to '([^']*)'")]
        public void ThenUserChangesALineFieldValueTo(int lineNumber, string lineFieldName, string lineFieldValue)
        {
            if (lineNumber > 1)
            {
                XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Enter focus mode for this part");
            }
            XrmApp.BusinessCentral.SetLineField(lineNumber, lineFieldName, lineFieldValue);

            XrmApp.BusinessCentral.ClickTopRightGridBtnByText("Exit focus mode");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user deletes a line '2'
        /// When user tries to delete a line '1'
        /// </example>
        /// <param name="lineNumber"></param>
        [When(@"user deletes a line '([^']*)'")]
        [When(@"user tries to delete a line '([^']*)'")]
        public void WhenUserTriesToDeleteALine(int lineNumber)
        {
            XrmApp.BusinessCentral.ChooseLineOption(lineNumber, "Delete Line");
            var DialogMessage = XrmApp.BusinessCentral.GetDialogMessage();
            _specFlowOutputHelper.WriteLine($"DialogMessage: {DialogMessage}");
            DialogMessage.Should().Contain("Go ahead and delete?");
            XrmApp.BusinessCentral.Dialog_ClickButton("Yes");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user selects the '1' line
        /// </example>
        /// <param name="lineNumber"></param>
        [When(@"user selects the '([^']*)' line")]
        public void WhenUserSelectsTheLine(int lineNumber)
        {
            XrmApp.BusinessCentral.ChooseLineOption(lineNumber, "Select More");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user selects the '1' line in 'Bank Statement Lines'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="tableName"></param>
        [When(@"user selects the '([^']*)' line in '([^']*)'")]
        public void WhenUserSelectsTheLineIn(int lineNumber, string tableName)
        {
            XrmApp.BusinessCentral.ChooseLineOption(lineNumber, "Select More", tableName);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that 'General Journal' line '1' column 'Document No.' has populated value
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        [Then(@"user sees that '[^']*?' line '([^']*)' column '([^']*)' has populated value")]
        public void ThenUserSeesThatLineFieldsHavePopulatedValue(int lineNumber, string columnName)
        {
            string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);
            _specFlowOutputHelper.WriteLine($"ActualLineFieldValue: {ActualLineFieldValue}");
            _scenarioContext.Add(columnName, ActualLineFieldValue);
            ActualLineFieldValue.Should().NotBeEmpty();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that 'Ledger Entry' line '1' column 'Document Type' has a value 'Credit Memo'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        /// <param name="expectedLineFieldValue"></param>
        [Then(@"*?er sees that '[^']*?' line '([^']*)' column '([^']*)' has a value '([^']*)'")]
        public void ThenUserSeesThatLineColumnHasValue(int lineNumber, string columnName, string expectedLineFieldValue)
        {
            string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);

            if (!expectedLineFieldValue.Contains("{"))
            {
                ActualLineFieldValue.Should().Be(expectedLineFieldValue);
            }
            else
            {
                var ExpectedFieldValue = _scenarioContext[expectedLineFieldValue.Replace("{", "").Replace("}", "")].ToString();
                ActualLineFieldValue.Should().Be(ExpectedFieldValue);
            }
        }

        /// <summary>
        /// Checks if ActualLineFieldValue is greater/less than the expected value
        /// </summary>
        /// <example>
        /// Then user sees that 'Purchase Order' line '2' column 'Direct Unit Cost Excl. GST' has a value greater than '0.00'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        /// <param name="operationType"></param>
        /// <param name="expectedLineFieldValue"></param>
        [Then(@"user sees that '[^']*?' line '([^']*)' column '([^']*)' has a value (greater|less) than '([^']*)'")]
        public void ThenUserSeesThatLineColumnHasAValueThan(int lineNumber, string columnName, string operationType, float expectedLineFieldValue)
        {
            float ActualLineFieldValue;
            float.TryParse(XrmApp.BusinessCentral.GetLineField(lineNumber, columnName), out ActualLineFieldValue);

            if (operationType == "greater")
            {
                ActualLineFieldValue.Should().BeGreaterThan(expectedLineFieldValue);
            }
            else
            {
                ActualLineFieldValue.Should().BeLessThan(expectedLineFieldValue);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that 'Ledger Entry' line '1' column 'Description' value contains the new record number
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        [Then(@"*?er sees that '[^']*?' line '([^']*)' column '([^']*)' value contains the new record number")]
        public void ThenUserSeesThatLineColumnContainsValueOfNewRecord(int lineNumber, string columnName)
        {
            string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);
            var AutogeneratedValue = _scenarioContext["AutogeneratedValue"].ToString();
            _specFlowOutputHelper.WriteLine($"New record value: {AutogeneratedValue}");
            ActualLineFieldValue.Should().Contain(AutogeneratedValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then approver sees that 'Ledger Entry' line '1' column 'Description' value contains the new record number of 'Purchase Credit Memo'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        /// <param name="formName"></param>
        [Then(@"*?er sees that '[^']*?' line '([^']*)' column '([^']*)' value contains the new record number of '([^']*)'")]
        public void ThenUserSeesThatLineColumnContainsValueOfNewRecord(int lineNumber, string columnName, string formName)
        {
            string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);
            var AutogeneratedValue = _scenarioContext[formName].ToString();
            _specFlowOutputHelper.WriteLine($"New record value of {formName}: {AutogeneratedValue}");
            ActualLineFieldValue.Should().Contain(AutogeneratedValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that 'General Ledger Entries' line '1' column 'Document No.' has a previously populated value of 'Document No.'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        /// <param name="prevPopValueLabel"></param>
        [Then(@".*er sees that '[^']*?' line '([^']*)' column '([^']*)' has a previously populated value of '([^']*)'")]
        public void ThenUserSeesThatLineColumnHasAutogeneratedValue(int lineNumber, string columnName, string prevPopValueLabel)
        {
            string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);
            var PreviouslyPopulatedValue = _scenarioContext[prevPopValueLabel].ToString();
            _specFlowOutputHelper.WriteLine($"Previously populated value: {PreviouslyPopulatedValue}");
            ActualLineFieldValue.Should().Be(PreviouslyPopulatedValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that 'Ledger Entry' line '1' column 'External Document No.' has a randomly generated value of 'Vendor Cr. Memo No.'
        /// </example>
        /// <param name="lineNumber"></param>
        /// <param name="columnName"></param>
        /// <param name="randGenValueLabel"></param>
        [Then(@".*er sees that '[^']*?' line '([^']*)' column '([^']*)' has a randomly generated value of '([^']*)'")]
        public void ThenUserSeesThatLineColumnHasRandomlyGenereatedValue(int lineNumber, string columnName, string randGenValueLabel)
        {
            var RandomlyGeneratedValue = _scenarioContext[randGenValueLabel].ToString();
            _specFlowOutputHelper.WriteLine($"Randomly generated value: {RandomlyGeneratedValue}");
            string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(lineNumber, columnName);
            ActualLineFieldValue.Should().Be(RandomlyGeneratedValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees 'Customer Ledger Entries' line fields:
        /// | Document Type		| Location Code | Quantity | Remaining Quantity |
        /// | Transfer Receipt  | GREENFIELD    |  1       | 1                  |
        /// </example>
        /// <param name="lineFields"></param>
        [Then(@".*er sees '[^']*?' line fields:")]
        public void ThenUserSeesThatLineFields(Table lineFields)
        {
            foreach (var line in lineFields.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in lineFields.Header)
                {
                    if (line.Value[header].Contains(">") || line.Value[header].Contains("<") || line.Value[header].Contains("not"))
                    {
                        float ExpectedLineFieldValue, ActualLineFieldValue;
                        float.TryParse(Regex.Replace(line.Value[header], @"[^0-9.]", ""), out ExpectedLineFieldValue);
                        float.TryParse(XrmApp.BusinessCentral.GetLineField(line.Index + 1, header), out ActualLineFieldValue);
                        if (line.Value[header].Contains(">"))
                        {
                            ActualLineFieldValue.Should().BeGreaterThan(ExpectedLineFieldValue);
                        }
                        else if(line.Value[header].Contains("<"))
                        {
                            ActualLineFieldValue.Should().BeLessThan(ExpectedLineFieldValue);
                        }
                        else
                        {
                            ActualLineFieldValue.Should().NotBe(ExpectedLineFieldValue);
                        }
                    }
                    else
                    {
                        string ActualLineFieldValue = XrmApp.BusinessCentral.GetLineField(line.Index + 1, header).Trim();
                        var ExpectedLineFieldValue = line.Value[header];
                        ActualLineFieldValue.Should().Be(ExpectedLineFieldValue);
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees exactly '1' line
        /// Then user sees exactly '5' lines
        /// </example>
        /// <param name="expectedNumberOfLines"></param>
        [Then(@"user sees exactly '([^']*)' line")]
        [Then(@"user sees exactly '([^']*)' lines")]
        public void ThenUserSeesLines(int expectedNumberOfLines)
        {
            var ActualNumberOfLines = XrmApp.BusinessCentral.GetNumberOfLines();
            ActualNumberOfLines.Should().Be(expectedNumberOfLines);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees exactly '1' line in 'Bank Statement Lines'
        /// Then user sees exactly '3' lines in 'Bank Statement Lines'
        /// </example>
        /// <param name="expectedNumberOfLines"></param>
        /// <param name="tableName"></param>
        [Then(@"user sees exactly '([^']*)' line in '([^']*)'")]
        [Then(@"user sees exactly '([^']*)' lines in '([^']*)'")]
        public void ThenUserSeesExactlyLineIn(int expectedNumberOfLines, string tableName)
        {
            var ActualNumberOfLines = XrmApp.BusinessCentral.GetNumberOfLines(tableName);
            ActualNumberOfLines.Should().Be(expectedNumberOfLines);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees at least '1' line in 'Bank Statement Lines'
        /// </example>
        /// <param name="expectedMinimumNumberOfLines"></param>
        /// <param name="tableName"></param>
        [Then(@"user sees at least '([^']*)' line in '([^']*)'")]
        public void ThenUserSeesAtLeastLineIn(int expectedMinimumNumberOfLines, string tableName)
        {
            var ActualNumberOfLines = XrmApp.BusinessCentral.GetNumberOfLines(tableName);
            _specFlowOutputHelper.WriteLine($"ActualNumberOfLines: {ActualNumberOfLines}");
            ActualNumberOfLines.Should().BeGreaterThanOrEqualTo(expectedMinimumNumberOfLines);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user sends approval request
        /// </example>
        [StepDefinition(@"user sends approval request")]
        public void WhenUserSendsApprovalRequest()
        {
            XrmApp.BusinessCentral.SendApprovalRequest();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user sends email to vendor
        /// </example>
        [StepDefinition(@"user sends email to vendor")]
        public void WhenUserSendsEmailToVendor()
        {
            XrmApp.BusinessCentral.EmailVendor(_bcemailrecipient);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user copies 'Posted Invoice' document 'PSI00022312'
        /// </example>
        /// <param name="documentType"></param>
        /// <param name="documentNo"></param>
        [When(@"user copies '([^']*)' document '([^']*)'")]
        public void WhenUserCopiesDocument(string documentType, string documentNo)
        {
            XrmApp.BusinessCentral.CopyDocument(documentType, documentNo);
        }

        [StepDefinition(@".*er posts the '[^']*'")]
        public void WhenUserPostsAndNotOpen()
        {
            bool openAfterPosting = false;
            XrmApp.BusinessCentral.PostViaHomeNav(openAfterPosting);
        }

        [StepDefinition(@".*er posts the '[^']*' and opens it")]
        public void WhenUserPostsAndOpens()
        {
            bool openAfterPosting = true;
            XrmApp.BusinessCentral.PostViaHomeNav(openAfterPosting);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user posts the 'Purchase Order' with option 'Receive'
        /// </example>
        /// <param name="pageType"></param>
        /// <param name="postOption"></param>
        [StepDefinition(@"user posts the '[^']*' with option '([^']*)'")]
        public void WhenUserPostsTheWithOption(string postOption)
        {
            XrmApp.BusinessCentral.PostWithOption(postOption);
        }

        [StepDefinition(@"user saves the '([^']*)' number")]
        public void WhenUserSavesTheDocumentNumber(string keyword)
        {
            XrmApp.BusinessCentral.FluentWaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GeneratedDocumentNumber]);
            var docNum = XrmApp.BusinessCentral.getDocumentNumberInvoice(AppElements.Xpath[AppReference.BusinessCentral.GeneratedDocumentNumber]);
            _scenarioContext.Add(keyword, docNum);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that in section 'General' field 'Status' has a value 'Pending Approval'
        /// Then user sees that 'Sales Credit Memo' in section 'Lines' field 'Total Excl. GST (NZD)' has a value '200.00'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        /// <param name="expectedFieldValue"></param>
        [Then(@"*?er sees that in section '([^']*)' field '([^']*)' has a value '([^']*)'")]
        [Then(@"*?er sees that '[^']*?' in section '([^']*)' field '([^']*)' has a value '([^']*)'")]
        public void ThenUserSeesTheRecordIs(string sectionName, string fieldName, string expectedFieldValue)
        {
            var ActualFieldValue = XrmApp.BusinessCentral.GetField(sectionName, fieldName);
            ActualFieldValue.Should().Be(TestDataUtils.ProcessTestData(expectedFieldValue));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that in section 'General' field 'Balance Last Statement' does not have a value '0.00'
        /// Then user sees that 'Sales Credit Memo' in section 'Lines' field 'Total Excl. GST (NZD)' does not have a value '0.00'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        /// <param name="unwantedFieldValue"></param>
        [Then(@"user sees that in section '([^']*)' field '([^']*)' does not have a value '([^']*)'")]
        [Then(@"user sees that '[^']*?' in section '([^']*)' field '([^']*)' does not have a value '([^']*)'")]
        public void ThenUserSeesThatInSectionFieldDoesNotHaveAValue(string sectionName, string fieldName, string unwantedFieldValue)
        {
            var ActualFieldValue = XrmApp.BusinessCentral.GetField(sectionName, fieldName);
            _specFlowOutputHelper.WriteLine($"ActualFieldValue: {ActualFieldValue}");
            ActualFieldValue.Should().NotBe(unwantedFieldValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that in section 'General' field 'Statement No.' has a populated value
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        [Then(@"user sees that in section '([^']*)' field '([^']*)' has a populated value")]
        public void ThenUserSeesThatInSectionFieldHasAPopulatedValue(string sectionName, string fieldName)
        {
            var ActualFieldValue = XrmApp.BusinessCentral.GetField(sectionName, fieldName);
            _specFlowOutputHelper.WriteLine($"ActualFieldValue: {ActualFieldValue}");
            _scenarioContext.Add(fieldName, ActualFieldValue);
            ActualFieldValue.Should().NotBeEmpty();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees message that the 'Transfer Order' was posted successfully
        /// Then user sees message that the 'General Journal lines' were posted successfully
        /// </example>
        [StepDefinition(@"user sees message that the '[^']*?' was posted successfully")]
        [StepDefinition(@"user sees message that the '[^']*?' were posted successfully")]
        public void ThenUserSeesMessageThatPostedSuccessfully()
        {
            var DialogMessage = XrmApp.BusinessCentral.GetDialogMessage();
            _specFlowOutputHelper.WriteLine($"DialogMessage: {DialogMessage}");
            DialogMessage.Should().ContainAny("was posted successfully", "was successfully posted", "were posted successfully", "were successfully posted");
            XrmApp.BusinessCentral.Dialog_ClickButton("OK");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that 'Purchase Invoice' was created successfully
        /// </example>
        /// <param name="formName"></param>
        [StepDefinition(@".*er sees that '([^']*)' was created successfully")]
        public void ThenUserSeesThatEntityWasCreatedSuccessfully(string formName)
        {
            XrmApp.ThinkTime(1000);
            var AutogeneratedValue = XrmApp.BusinessCentral.GetEntityNoFromHeader();
            try
            {
                //TODO: replace this code with the "_scenarioContext.Add(formName, AutogeneratedValue)"
                // This is left to keep backward compatibility in old scenarios (no more remaining hours in the project to make it right)
                _scenarioContext.Add("AutogeneratedValue", AutogeneratedValue);
            }
            catch (Exception ex)
            {
                Log.Warning($"{ex.Message}. Ignore this warning if the test passed - there is an unfinished framework development that covers only some of the test scenarios. See EntityStepDefinitions.ThenUserSeesThatEntityWasCreatedSuccessfully() for more details.");
            }
            _scenarioContext.Add(formName, AutogeneratedValue);
            _specFlowOutputHelper.WriteLine($"Autogenerated value for '{formName}': {AutogeneratedValue}");
            AutogeneratedValue.Should().NotBeEmpty();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// user verify posting new Purchase Invoice is successful
        /// </example>
        [Then(".*er verifies that posting new Purchase Invoice is successful")]
        public void VerifyPostedPurchaseInvoiceSuccessful()
        {
            XrmApp.BusinessCentral.VerifyPostedPurchaseInvoiceSuccessfulWindowIsDisplayed();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then user sees that column 'Qty. to Receive' is empty
        /// </example>
        /// <param name="columnName"></param>
        [Then(@"user sees that column '([^']*)' is empty")]
        public void WhenUserSeesThatColumnIsEmpty(string columnName)
        {
            //TODO: replace with a method returning boolean and proper .Should() method.
            XrmApp.BusinessCentral.CheckColumnEmpty(columnName);
        }

        /// <summary>
        /// Checks if two columns have the same values.
        /// </summary>
        /// <example>
        /// Then user sees that column '([^']*)' has the same values as column '([^']*)'
        /// </example>
        /// <param name="givenColumn"></param>
        /// <param name="columnToCheck"></param>
        [Then(@"user sees that column '([^']*)' has the same values as column '([^']*)'")]
        public void ThenUserSeesThatColumnHasTheSameValuesAsColumn(string givenColumn, string columnToCheck)
        {
            XrmApp.BusinessCentral.CheckColumnsHaveSameValues(givenColumn, columnToCheck);
        }

        /// <summary>
        /// Checks if the line/row/record has the same value in provided two columns/fields.
        /// </summary>
        /// <example>
        /// Then user sees that column 'Remaining Amount' has the same values as column 'Original Amount' in '1' record
        /// </example>
        /// <param name="givenColumn"></param>
        /// <param name="columnToCheck"></param>
        /// <param name="line"></param>
        [Then(@"user sees that column '([^']*)' has the same values as column '([^']*)' in '([^']*)' record")]
        public void ThenUserSeesThatColumnHasTheSameValuesAsColumnIn(string givenColumn, string columnToCheck, string line)
        {
            XrmApp.BusinessCentral.CheckColumnsHaveSameValuesInLine(givenColumn, columnToCheck, line);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user displays related documents 'Receipts'
        /// </example>
        /// <param name="documentsOption"></param>
        [When(@"user displays related documents '([^']*)'")]
        public void WhenUserDisplaysRelatedDocuments(string documentsOption)
        {
            _scenarioContext.Remove("GridItems");
            XrmApp.BusinessCentral.NavigateToDocumentsAndSelect(documentsOption);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user selects function 'Undo Receipt'
        /// </example>
        /// <param name="function"></param>
        [When(@"user selects function '([^']*)'")]
        public void WhenUserSelectsFunction(string function)
        {
            XrmApp.BusinessCentral.SelectOptionFunction(function);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user generates suggested lines
        /// </example>
        [When(@"user generates suggested lines")]
        public void WhenUserGenerateSuggestedLines()
        {
            XrmApp.BusinessCentral.GenerateSuggestedLines();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user enters into field 'Batch Name' value 'MEGAN'
        /// </example>
        /// <param name="inputFieldName"></param>
        /// <param name="inputFieldValue"></param>
        [StepDefinition(@"user enters into field '([^']*)' value '([^']*)'")]
        public void WhenUserChoosesAOf(string inputFieldName, string inputFieldValue)
        {
            XrmApp.BusinessCentral.SetField(inputFieldName, inputFieldValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver rejects the approval request
        /// </example>
        [When(@"approver rejects the approval request")]
        public void WhenApproverTheApprovalRequest()
        {
            XrmApp.BusinessCentral.RejectApprovalRequest();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver confirms rejecting approval request
        /// </example>
        [When(@"approver confirms rejecting approval request")]
        public void WhenApproverConfirmsRejectingApprovalRequest()
        {
            XrmApp.BusinessCentral.ConfirmRejectingApprovalRequest();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// user verify posting new Purchase Invoice is successful
        /// </example>
        [StepDefinition("user verify posting new Journal Lines is successful")]
        public void VerifyPostedJournalLinesSuccessful()
        {

            XrmApp.BusinessCentral.VerifyPostedPurchaseInvoiceSuccessfulWindowIsDisplayed();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver filters records by 'Document Type' value 'Purchase Invoice'
        /// </example>
        /// <param name="filterField"></param>
        /// <param name="filterValue"></param>
        [When(@".*er filters records by '([^']*)' value '([^']*)'")]
        public void WhenApproverFiltersRecordsByValue(string filterField, string filterValue)
        {
            string value = GetScenarioContextData(filterValue);
            XrmApp.BusinessCentral.FilterRecords(filterField, value);
        }

        [When(@"user sends '([^']*)'")]
        public void WhenUserSends(string MenuTitle)
        {
            //  XrmApp.BusinessCentral.Post_UsingPosting(MenuTitle);
            //throw new PendingStepException();
        }

        [StepDefinition(@"*?er sends '([^']*)' and then '([^']*)'")]
        [StepDefinition(@"*?er clicks the '([^']*)' menu and then '([^']*)'")]
        [StepDefinition(@"*?er clicks the '([^']*)' menu and the '([^']*)' submenu")]
        [StepDefinition(@"*?er clicks the '([^']*)' header and then '([^']*)'")]
        public void WhenUserClicksTheMenuAndThen(string Menu, string SubMenu)
        {
            XrmApp.BusinessCentral.ClickMenuAndSubMenu(Menu, SubMenu);
        }

        [When(@"user opens '[^']*' actions menu and clicks '([^']*)'")]
        public void WhenUserOpensActionsMenuAndClicks(string postSubMenu)
        {
            XrmApp.BusinessCentral.ClickPostSubMenu(postSubMenu);
        }

        [When(@"approver posts the '([^']*)' and save record number")]
        public void WhenApproverPostsThe(string MenuTitle)
        {
            // XrmApp.BusinessCentral.Post_UsingPosting(MenuTitle);
            //throw new PendingStepException();
            XrmApp.BusinessCentral.PostViaHomeNav(true);

            var AutogeneratedValue = XrmApp.BusinessCentral.GetEntityNoFromHeader();
            //var formName = "Posted " + MenuTitle;
            try
            {
                //TODO: replace this code with the "_scenarioContext.Add(formName, AutogeneratedValue)"
                // This is left to keep backward compatibility in old scenarios (no more remaining hours in the project to make it right)
                _scenarioContext.Add("AutogeneratedValue", AutogeneratedValue);
            }
            catch (Exception ex)
            {
                Log.Warning($"{ex.Message}. Ignore this warning if the test passed - there is an unfinished framework development that covers only some of the test scenarios. See EntityStepDefinitions.ThenUserSeesThatEntityWasCreatedSuccessfully() for more details.");
            }
            _scenarioContext.Add(MenuTitle, AutogeneratedValue);
            _specFlowOutputHelper.WriteLine($"Autogenerated value for '{MenuTitle}': {AutogeneratedValue}");
            AutogeneratedValue.Should().NotBeEmpty();

         //   XrmApp.BusinessCentral.ProcessPost();
        }


        [StepDefinition(@"*?er posts the Account Reconciliation")]
        public void WhenApproverPostsTheAR()
        {
            XrmApp.BusinessCentral.ProcessPostBankAR();
        }

        [StepDefinition(@"*?er clicks '([^']*)' in Modal window")]
        public void WhenApproverClickButtonInModal(string button)
        {
            XrmApp.BusinessCentral.WaitForElementToAppear(button);
            XrmApp.BusinessCentral.ClickButtonInModal(button);
        }

        [StepDefinition(@"working on it modal window is displayed")]
        public void WhenWorkingOnItModalWindowIsDisplayed()
        {
            XrmApp.BusinessCentral.WaitForWorkingOnItWindowToDissapear();
        } 
        
        [StepDefinition(@".*er sees the 'You Cannot Post' modal")]
        public void WhenYouCannotPostIsDisplayed()
        {
            XrmApp.BusinessCentral.WaitForWorkingOnItWindowToDissapear();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver filters records by 'Document No.' new record number
        /// </example>
        /// <param name="filterField"></param>
        [When(@".*er filters records by '([^']*)' new record number")]
        public void WhenApproverFiltersRecordsByNewRecord(string filterField)
        {
            var AutogeneratedValue = _scenarioContext["AutogeneratedValue"].ToString();
            _specFlowOutputHelper.WriteLine($"New record value: {AutogeneratedValue}");
            XrmApp.ThinkTime(1000);
            XrmApp.BusinessCentral.FilterRecords(filterField, $"{AutogeneratedValue}");
            //TODO: need to check if the result is not empty, otherwise the scenario fails few steps later which is much harder to investigate
        }

        [When(@"*?er searches for the new '([^']*)' record")]
        public void WhenApproverSearchesForTheNewRecord(string keyword)
        {
            string recordNumber = GetScenarioContextData(keyword);
            _specFlowOutputHelper.WriteLine($"{keyword} new record: {recordNumber}");
            XrmApp.BusinessCentral.SearchRecords($"'{recordNumber}'");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver filters records by 'Document No.' new record number of 'Purchase Credit Memo'
        /// </example>
        /// <param name="filterField"></param>
        /// <param name="formName"></param>
        [When(@".*er filters records by '([^']*)' new record number of '([^']*)'")]
        public void WhenApproverFiltersRecordsByNewRecordOf(string filterField, string formName)
        {
            var AutogeneratedValue = _scenarioContext[formName].ToString();
            _specFlowOutputHelper.WriteLine($"New record value of {formName}: {AutogeneratedValue}");
            XrmApp.BusinessCentral.FilterRecords(filterField, $"{AutogeneratedValue}");
            //TODO: need to check if the result is not empty, otherwise the scenario fails few steps later which is much harder to investigate
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver accepts the approval request
        /// </example>
        [When(@"approver accepts the approval request")]
        public void WhenApproverAcceptsTheApprovalRequest()
        {
            XrmApp.BusinessCentral.AcceptApprovalRequest();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user opens Vendor Ledger Entries
        /// </example>
        [When(@".*er opens Vendor Ledger Entries")]
        public void WhenUserNavigatesToVendorLedgerEntries()
        {
            XrmApp.BusinessCentral.OpenVendorLedgerEntries();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user opens Customer Ledger Entries
        /// </example>
        [When(@".*er opens Customer Ledger Entries")]
        public void WhenUserOpensLedgerEntries()
        {
            XrmApp.BusinessCentral.OpenCustomerLedgerEntries();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user enters randomly generated value in section 'General' into field 'Vendor Invoice No.'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        [When(@"user enters randomly generated value in section '([^']*)' into field '([^']*)'")]
        public void WhenUserEntersRandomlyGeneratedValueInSectionIntoField(string sectionName, string fieldName)
        {
            string RandomlyGeneratedValue = DateTime.Now.ToString("yyyyMMddHHmm");
            _specFlowOutputHelper.WriteLine($"Randomly generated value: {RandomlyGeneratedValue}");
            _scenarioContext.Add(fieldName, RandomlyGeneratedValue);
            XrmApp.BusinessCentral.SetField(sectionName, fieldName, RandomlyGeneratedValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user enters previously randomly generated value for field 'Vendor Invoice No.' in section 'General' into field 'Vendor Cr. Memo No.'
        /// </example>
        /// <param name="prevRandGenFieldName"></param>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        [When(@"user enters previously randomly generated value for field '([^']*)' in section '([^']*)' into field '([^']*)'")]
        public void WhenUserEntersPreviouslyRandomlyGeneratedValueInSectionIntoField(string prevRandGenFieldName, string sectionName, string fieldName)
        {
            var RandomlyGeneratedValue = _scenarioContext[prevRandGenFieldName].ToString();
            _specFlowOutputHelper.WriteLine($"Previously randomly generated value: {RandomlyGeneratedValue}");
            XrmApp.BusinessCentral.SetField(sectionName, fieldName, RandomlyGeneratedValue);
        }

        /// <summary>
        /// Turns of the 'Follow Workflow Hierarchy' using the toggle switch.
        /// </summary>
        /// <example>
        /// When user turns off Follow Workflow Hierarchy.
        /// </example>
        [When(@"user turns off the 'Follow Workflow Hierarchy' toggle")]
        public void WhenToggleWorkflowHierarchyOff()
        {
            XrmApp.BusinessCentral.ToggleFollowWorkflowHierarchyButton();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user copies the 'Posted Invoice' document
        /// </example>
        [When(@"user copies the '[^']*?' document")]
        public void WhenUserCopiesTheDocument()
        {
            XrmApp.BusinessCentral.CopyDocument();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user enters in section 'General' into field 'Document No.' value from previously populated field 'Order No.'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="targetFieldName"></param>
        /// <param name="sourceFieldName"></param>
        [When(@"user enters in section '([^']*)' into field '([^']*)' value from previously populated field '([^']*)'")]
        public void WhenUserEntersInSectionIntoFieldValueFromPreviouslyPopulatedField(string sectionName, string targetFieldName, string sourceFieldName)
        {
            string? SourceFieldValue = _scenarioContext[sourceFieldName].ToString();
            SourceFieldValue.Should().NotBeNull();
            _specFlowOutputHelper.WriteLine($"SourceFieldValue: {SourceFieldValue}");
            XrmApp.BusinessCentral.SetField(sectionName, targetFieldName, SourceFieldValue);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When user enters in section 'Options' into field 'Document No.' the new record number of 'Posted Sales Invoice'
        /// </example>
        /// <param name="sectionName"></param>
        /// <param name="targetFieldName"></param>
        /// <param name="formName"></param>
        [When(@"user enters in section '([^']*)' into field '([^']*)' the new record number of '([^']*)'")]
        public void WhenUserEntersInSectionIntoFieldValueFromTheNewRecordNumberOf(string sectionName, string targetFieldName, string formName)
        {
            string? NewRecordNumber = _scenarioContext[formName].ToString();
            NewRecordNumber.Should().NotBeNull();
            _specFlowOutputHelper.WriteLine($"New record number of {formName}: {NewRecordNumber}");
            _specFlowOutputHelper.WriteLine($"SourceFieldValue: {NewRecordNumber}");
            XrmApp.BusinessCentral.SetField(sectionName, targetFieldName, NewRecordNumber);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver confirms applying vendor entry
        /// When user confirms copying the Posted Invoice document
        /// </example>
        [When(@".*er confirms applying .*")]
        [When(@".*er confirms copying .*")]
        public void WhenUserConfirmsCopyingThe()
        {
            XrmApp.BusinessCentral.Dialog_ClickButton("OK");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// When approver applies vendor entries for the new record number of 'Posted Purchase Invoice'
        /// </example>
        /// <param name="formName"></param>
        [When(@".*er applies vendor entries for the new record number of '([^']*)'")]
        public void WhenUserAppliesVendorEntriesForTheNewRecordNumberOf(string formName)
        {
            var AutogeneratedValue = _scenarioContext[formName].ToString();
            _specFlowOutputHelper.WriteLine($"New record value of '{formName}': '{AutogeneratedValue}'");
            XrmApp.BusinessCentral.ApplyVendorEntries(AutogeneratedValue);
        }  
        
        [StepDefinition(@"user posts Prepayment Invoice")]
        public void UserPostsPrepaymentInvoice()
        {
            XrmApp.BusinessCentral.PostPrePaymentInvoice();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// Then approver sees that 'Applies-to ID' for Document No. equals to new record number of 'Posted Purchase Invoice' has the value equal to new record number of 'Purchase Credit Memo'
        /// </example>
        /// <param name="formNameForDocumentNo"></param>
        /// <param name="formNameForAppliesToId"></param>
        [Then(@".*er sees that '[^']*?' for Document No\. equals to new record number of '([^']*)' has the value equal to new record number of '([^']*)'")]
        public void ThenUserSeesThatForDocumentNo_EqualToNewRecordNumberOfHasTheValueEqualToNewRecordNumberOf(string formNameForDocumentNo, string formNameForAppliesToId)
        {
            var AutogeneratedValueForDocumentNo = _scenarioContext[formNameForDocumentNo].ToString();
            _specFlowOutputHelper.WriteLine($"New record value of '{formNameForDocumentNo}': '{AutogeneratedValueForDocumentNo}'");

            var AutogeneratedValueForAppliesToId = _scenarioContext[formNameForAppliesToId].ToString();
            _specFlowOutputHelper.WriteLine($"New record value of '{formNameForAppliesToId}': '{AutogeneratedValueForAppliesToId}'");

            string AppliesToId = XrmApp.BusinessCentral.ApplyVendorEntries_GetAppliesToId(AutogeneratedValueForDocumentNo);
            _specFlowOutputHelper.WriteLine($"'Applies-to ID' for Document No. '{AutogeneratedValueForDocumentNo}': '{AppliesToId}'");
            AppliesToId.Should().Be(AutogeneratedValueForAppliesToId);
        }

        /// <summary>
        /// Sets multiple fields in a form
        /// </summary>
        /// <example>
        /// When user sets the fields with the following information:
        /// </example>
        /// <param name="table"></param>
        [When(@".*er sets the fields with the following information:")]
        public void WhenUserSetsTheFieldsWithInformation(Table table)
        {
            foreach (var row in table.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in table.Header)
                {
                    var FieldValue = TestDataUtils.ProcessTestData(row.Value[header]);
                    _scenarioContext.Add(header, FieldValue);
                    XrmApp.BusinessCentral.SetField(header, FieldValue);
                }
            }
        }

        /// <summary>
        /// Clicks button on a dialog box or task/modal form given button name
        /// </summary>
        /// <example>
        /// When useer clicks the 'Close' button on the dialog
        /// </example>
        /// <param name="button"></param>
        [StepDefinition(@"*?er clicks the '([^']*)' button on the (?:task form|dialog)")]
        [StepDefinition(@"*?er clicks the '([^']*)' button")]
        public void WhenUserClicksTheButtonOnTheTaskOrDialog(string button)
        {
            XrmApp.BusinessCentral.Dialog_ClickButton(button);
        }

        /// <summary>
        /// Setup values for fields specifically in the task/modal forms
        /// </summary>
        /// <example>
        /// When user enters into field 'No.' value 'C0032' on the task form
        /// </example>
        /// <param name="field"></param>
        /// <param name="value"></param>
        [When(@"*?er enters into field '([^']*)' value '([^']*)' on the task form")]
        public void WhenUserEntersIntoFieldValueOnTheTaskForm(string field, string value)
        {
            XrmApp.BusinessCentral.SetFieldOnTaskForm(field, value);
        }

        /// <summary>
        /// Clicks and open the linked/anchored value under a given line number and column
        /// </summary>
        /// <example>
        /// And user click the linked value under line '1' column 'Total Value'
        /// </example>
        /// <param name="line"></param>
        /// <param name="column"></param>
        [When(@".*er clicks the linked (?:value|text) under line '([^']*)' column '([^']*)'")]
        public void WhenUserClicksTheLinkUnderLineColumn(int line, string column)
        {
            XrmApp.BusinessCentral.ClickLinkedValueUnderColumn(line, column);
        }


        [When(@"user imports the '([^']*)' file in '([^']*)' field")]
        public void WhenUserImportsAFileInField(string fileName, string fieldName)
        {
            XrmApp.BusinessCentral.ImportFileInField(fileName, fieldName);
            XrmApp.ThinkTime(500);
            XrmApp.BusinessCentral.Dialog_ClickButton("OK");
        }

        [When(@"user sees that the 'Purchase Invoice Import' is completed successfully")]
        public void WhenUserSeesThatTheInvoiceIsCompletedSuccessfully()
        {
            string SuccessDialog = XrmApp.BusinessCentral.GetDialogMessage();
            int WaitingTime = 0;
            while (!SuccessDialog.Contains("The import completed successfully") && WaitingTime < 3000)
            {
                XrmApp.ThinkTime(500);
                SuccessDialog = XrmApp.BusinessCentral.GetDialogMessage();
                WaitingTime += 500;
            }
            XrmApp.BusinessCentral.Dialog_ClickButton("OK");
        }


        [StepDefinition(@"user clicks the Show the Rest button")]
        public void WhenUserClicksTheShowTheRestButton()
        {

            XrmApp.BusinessCentral.ClickButtonShowTheRest();
        }

        /// <summary>
        /// Sorts a table by column name and a given order
        /// </summary>
        /// <example>
        /// When user sorts the table by 'Line no.' in 'descending' order
        /// </example>
        /// <param name="column"></param>
        /// <param name="order"></param>
        [When(@".*er sorts the table by '([^']*)' in '(descending|ascending)' order")]
        public void WhenUserSortsTheTableByInOrder(string column, string order)
        {
            XrmApp.BusinessCentral.SortTableByColumn(column, order);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>
        /// user enters the following details in Calculate and Post GST Settlement
        /// </example>
        /// <param name="table"></param>
        [StepDefinition(@"user enters the following details in Calculate and Post GST Settlement")]
        public void ThenUserEntersTheFollowingDetailsInCalculateAndPostGSTSettlement(Table table)
        {
            foreach (var line in table.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in table.Header)
                {
                    XrmApp.BusinessCentral.SendKeyLineFieldCalculateAndPostGstSettlement(header, line.Value[header]);
                }
            }
            XrmApp.ThinkTime(1000); //give BC time to autopopulate fields
        }

        [StepDefinition(@"user manages and edit the '[^']*'")]
        public void UserManagesAndEditThe()
        {
            UserClicksButton("Manage");
            UserClicksButton("Edit");
            XrmApp.ThinkTime(1000);
            if (XrmApp.BusinessCentral.GetDialogMessage().Contains("There are ongoing reconciliations"))
            {
                UserClicksButton("OK");
                XrmApp.ThinkTime(1000);
            }
        }

        /// <param name="button"></param>
        [StepDefinition(@"user clicks button ""([^""]*)""")]
        public void UserClicksButton(string button)
        {
            XrmApp.BusinessCentral.ThinkTimeinSeconds(1);
            XrmApp.BusinessCentral.FluentWaitForElementToAppear("//form[not(@tabindex)]//*[text()='"+button+"']/ancestor::button");
            XrmApp.BusinessCentral.ClickElementButton(button);
        }

        [When(@"user clicks button name containing ""([^""]*)""")]
        public void WhenUserClicksButtonNameContaining(string button)
        {
            XrmApp.BusinessCentral.FluentWaitForElementToAppear("//form[not(@tabindex)]//*[contains(text(),'" + button + "')]/ancestor::button");
            XrmApp.BusinessCentral.ClickElementButtonWithContainName("//form[not(@tabindex)]//*[contains(text(),'" + button + "')]/ancestor::button");
        }

        [Then(@"Print window is displayed")]
        public void PrintWindowIsDisplayed()
        {
            XrmApp.BusinessCentral.FluentWaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.Yes]);
        }


        [Then(@"the user sees that the GST settlement is posted successfully and the Print window is displayed")]
        public void PrintWindowIsDisplayedd()
        {
            XrmApp.BusinessCentral.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.Yes]);
        }

        [StepDefinition(@"user updates the correct Statement Ending balance")]
        public void ThenUserUpdatesTheCorrectStatementEndingBalance()
        {
            XrmApp.BusinessCentral.UpdateStatementBalance();
        }

        [StepDefinition(@"user enters the Search Service ID '([^']*)'")]
        public void ThenUserEntersTheSearchServiceID(string value)
        {
            XrmApp.BusinessCentral.EnterSearchServiceID(value);
        }

        
        [StepDefinition(@"user sees the connections One-Off products window is displayed")]
        public void ThenTheConnectionsOne_OffProductsWindowIsDisplayed()
        {
            var lastEntry = XrmApp.BusinessCentral.ConnectionOneOffProductsWindowIsDisplayed();
            _scenarioContext.Add("lastEntry", lastEntry);
        }

        [StepDefinition(@"user sees the new One-Off Product entry")]
        public void ThenTheNewOne_OffProductEntryIsDisplayed()
        {
            var lastEntry = _scenarioContext["lastEntry"].ToString();
            XrmApp.BusinessCentral.ConnectionNewOneOffEntryNoIsDisplayed(lastEntry);
        }

        [StepDefinition(@"user sees that the following details are displayed:")]
        public void ThenUserSeesThatTheFollowingDetailsAreDisplayed(Table table)
        {
            foreach (var line in table.Rows.Select((Value, Index) => new { Value, Index }))
            {
                foreach (var header in table.Header)
                {
                    XrmApp.BusinessCentral.VerifyPostedSalesInvoiceDimensionCode(header, line.Value[header]);
                }
            }
            XrmApp.ThinkTime(1000);
        }

        [StepDefinition(@"user posts the Purchase Invoice")]
        public void WhenUserPostTheThePurchaseInvoice()
        {
            XrmApp.BusinessCentral.PostViaHomeNav(false);
            XrmApp.BusinessCentral.FluentWaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GeneratedDocumentNumber]);
            var docNum = XrmApp.BusinessCentral.getDocumentNumber(AppElements.Xpath[AppReference.BusinessCentral.GeneratedDocumentNumber]);
            _scenarioContext.Add("docNum", docNum);
        }

        [When(@".*er posts the '[^']*' without opening it")]
        public void WhenUserPostsTheWithoutOpeningIt()
        {
            XrmApp.BusinessCentral.PostAndNotOpen();
            XrmApp.BusinessCentral.FluentWaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GeneratedDocumentNumberCreditMemo]);
            var docNum = XrmApp.BusinessCentral.getDocumentNumberCreditMemo(AppElements.Xpath[AppReference.BusinessCentral.GeneratedDocumentNumberCreditMemo]);
            _scenarioContext.Add("docNum", docNum);
        }

        [StepDefinition(@"user searches the generated '([^']*)'")]
        public void WhenUserSearchTheGenerated(string p0)
        {
            var DocNum = _scenarioContext["docNum"].ToString();
            XrmApp.BusinessCentral.SearchRecords(DocNum);

        }

        /// <summary>
        /// Adds recurring additional charge for a customer no. IF customer no already exists, delete before adding
        /// </summary>
        /// <param name="value"></param>
        [When(@"user adds 'Recurring Additional Charge' for Customer No\. '([^']*)'")]
        public void WhenUserAddsRecurringAdditionalCharge(string value)
        {
            XrmApp.BusinessCentral.AddRecurringAC(value);
        }

        [Then(@"user deletes the suggested connection billing for '([^']*)'")]
        public void ThenUserDeletesTheSuggestedConnectionBillingFor(string customerNo)
        {
            XrmApp.BusinessCentral.SearchForPageWithType("Connection Suggested Invoices", "Lists");
            XrmApp.BusinessCentral.DeleteSuggestedConnectionBilling(customerNo);
        }

        /// <summary>
        /// Focuses/Expands the table and filters the record
        /// </summary>
        /// <param name="field"></param>
        /// <param name="keyword"></param>
        [When(@"user expands the '[^']*' table and filters records by '([^']*)' value '([^']*)'")]
        public void WhenUserExpandsTableAndFiltersRecordsByValue(string field, string keyword)
        {
            string value = GetScenarioContextData(keyword);
            XrmApp.BusinessCentral.FilterRecordOnFocusedGrid(field, value);
        }


        [When(@"user searches for '[^']*' with value '([^']*)'")]
        public void WhenUserSearchesForWithValue(string keyword)
        {
            string searchKey = GetScenarioContextData(keyword);
            XrmApp.BusinessCentral.SearchRecords(searchKey);
        }

        [When(@"user collapses the right side panel")]
        public void WhenUserCollapsesTheRightSidePanel()
        {
            XrmApp.BusinessCentral.ClickCollapseFactBox();
        }

        /// <summary>
        /// Clicks the back button
        /// </summary>
        [When(@".*er clicks on the back button")]
        [When(@".*er goes back to the previous page")]
        public void WhenUserClicksOnTheBackButton()
        {
            XrmApp.BusinessCentral.ClickBackButton();
        }

        /// <summary>
        /// Clicks the specific menu item under multiple sub-menus
        /// </summary>
        /// <param name="lastMenuItem"></param>
        [When(@".*er clicks the '([^']*)' item through the menu")]
        public void WhenUserClicksTheItemThroughTheMenu(string lastMenuItem)
        {
            XrmApp.BusinessCentral.ClickItemUnderMoreOptions(lastMenuItem);
        }

        /// <summary>
        /// Stores generated reconrd numbers
        /// </summary>
        /// <param name="fieldName"></param>
        [When(@"user sees the generated '([^']*)'")]
        public void WhenUserSeesTheGenerated(string fieldName)
        {
            string recordNo = XrmApp.BusinessCentral.GetEntityNoFromHeader();
            if (!recordNo.IsEmptyValue())
            {
                _scenarioContext.Add(fieldName, recordNo);
            }
        }


        /// <summary>
        /// Search a record inside a dialog pop-up
        /// </summary>
        /// <param name="value"></param>
        [When(@"user searches for '([^']*)' in the dialog form")]
        public void WhenUserSearchesForInTheDialogForm(string value)
        {
            string searchData = GetScenarioContextData(value);
            XrmApp.BusinessCentral.SearchRecordInDialogForm(searchData);
        }

        /// <summary>
        /// Clicks any link with specific text
        /// </summary>
        /// <param name="keyword"></param>
        [When(@"user opens the '([^']*)' link")]
        public void WhenUserOpensTheLink(string keyword)
        {
            string extractedData = GetScenarioContextData(keyword);
            XrmApp.BusinessCentral.OpenLinkedText(extractedData);
        }

        [When(@"user opens the '([^']*)' linked record")]
        public void WhenUserOpensTheLinkedRecord(string keyword)
        {
            string extractedData = GetScenarioContextData(keyword);
            XrmApp.BusinessCentral.OpenRecord(extractedData);
        }

        [StepDefinition(@"user verifies FSL ID value is: '([^']*)'")]
        public void VerifyFSLIDValue(string value)
        {
            XrmApp.BusinessCentral.VerifyFSLID(value);
        }

        [StepDefinition(@"user verifies FSL ID invalid error")]
        public void WhenUserVerifiesFSLIDInvalidError()
        {
            XrmApp.BusinessCentral.VerifyFSLIDIsInvalid();
        }


        [StepDefinition(@"user verifies FSL Address value is: '([^']*)'")]
        public void VerifyFSLAddressValue(string value)
        {
            XrmApp.BusinessCentral.VerifyFSLAddress(value);
        }

        [StepDefinition(@"user prints and attaches the document")]
        public void WhenUserPrintAndAttachedTheDocument()
        {
            XrmApp.BusinessCentral.ClickPrintSend();
            XrmApp.BusinessCentral.AttachAsPDF();
        }

        /// <summary>
        /// Processes expected data when enclosed with curly braces {keyword}
        /// </summary>
        /// <param name="keyword"></param>
        /// <returns></returns>
        public string GetScenarioContextData(string keyword)
        {
            string processedKeyword = TestDataUtils.ProcessExpectedData(keyword);
            if (_scenarioContext.ContainsKey(processedKeyword) && _scenarioContext[processedKeyword] != null)
            {
                return _scenarioContext[processedKeyword].ToString()!;
            }
            return processedKeyword;
        }

        /// <summary>
        /// Proceses input data when field value is enclosed in curly braces
        /// </summary>
        /// <param name="field"></param>
        /// <param name="keyword"></param>
        /// <returns></returns>
        public string ResolveTestData(string field, string keyword)
        {
            //Format: {Same_<Field>} will use the existing value for <Field>
            if (keyword.Contains("Same"))
            {
                string extractedKey = keyword.Split('_')[1].TrimEnd('}');
                return GetScenarioContextData(extractedKey);

            }
            if (keyword.Contains("{") && !keyword.Contains("Same"))
            {
                string ProcessedTestData = TestDataUtils.ProcessTestData(keyword);
                AddOrUpdateScenarioContextData(field, ProcessedTestData);
                return ProcessedTestData;
            }
            return keyword;
        }

        /// <summary>
        /// Add new scenario context data or update when existing
        /// </summary>
        /// <param name="field"></param>
        /// <param name="data"></param>
        public void AddOrUpdateScenarioContextData(string field, string data)
        {
            if (!_scenarioContext.ContainsKey(field))
            {
                _scenarioContext.Add(field, data);
            }
            else
            {
                _scenarioContext[field] = data;
            }
        }
    }
}