// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Drawing;
using System.IO;
using Microsoft.Dynamics365.UIAutomation.Browser;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium;
using Nancy;
using OpenQA.Selenium.Support.UI;
using static Microsoft.Dynamics365.UIAutomation.Api.UCI.AppReference.Entity;
using System.Net.Http;
using System.Threading.Tasks;
using System.Linq;

namespace Microsoft.Dynamics365.UIAutomation.Api.UCI
{
    /// <summary>
    /// Class that connects Step Definitions with WebClient
    /// </summary>
    public class BusinessCentral : Element
    {
        private readonly WebClient _client;
        public static HttpClient client = new HttpClient();

        public BusinessCentral(WebClient client) : base()
        {
            _client = client;
        }

        /// <summary>
        /// Searches using Search For Page
        /// </summary>
        /// <param name="criteria">Criteria to search for</param>
        /// <returns></returns>
        public bool SearchForPage(string criteria)
        {
            return _client.BC_SearchForPage(criteria);
        }

        public bool SearchForPageWithType(string keyword, string type)
        {
            return _client.BC_SearchForPageWithType(keyword, type);
        }

        /// <summary>
        /// Clicks the Sign Out button.
        /// </summary>
        /// <param name="url"></param>
        /// <exception cref="System.InvalidProgramException"></exception>
        public void SignOut(string url)
        {
            bool SignOutResult = _client.BC_SignOut(url);
            if (SignOutResult.Equals(false))
                throw new System.InvalidProgramException("Sign Out failure, please check your configuration");
        }

        /// <summary>
        /// Clicks the refresh links which appears if there are errors in a form.
        /// </summary>
        public void ClickRefreshLink()
        {
            _client.BC_ClickRefreshLink();
        }

        /// <summary>
        /// Gets page error message.
        /// </summary>
        /// <returns></returns>
        public string GetPageErrorMessage()
        {
            return _client.BC_GetPageErrorMessage();
        }

        /// <summary>
        /// Returns a list of items from the current grid.
        /// </summary>
        /// <returns></returns>
        public List<GridItem> GetGridItems()
        {
            return _client.BC_GetGridItems();
        }

        /// <summary>
        /// Opens a record in the grid.
        /// </summary>
        /// <param name="recordNo">The recordNo (name) of the row to open</param>
        public void OpenRecord(string recordNo)
        {
            _client.BC_OpenRecord(recordNo);
        }

        /// <summary>
        /// Sorts a table by given column name and order
        /// </summary>
        /// <param name="columnName"></param>
        /// <param name="sortOrder"></param>
        public void SortTableByColumn(string columnName, string sortOrder)
        {
            _client.BC_SortTableByColumn(columnName, sortOrder);
        }

        /// <summary>
        /// In the window with list records, filters the list using the 'Search' function and provided record number.
        /// </summary>
        /// <param name="recordNumber"></param>
        public void SearchRecords(string recordNumber)
        {
            _client.BC_SearchRecords(recordNumber);
        }
        /// <summary>
        /// Search function inside a dialog pop-up
        /// </summary>
        /// <param name="value"></param>
        public void SearchRecordInDialogForm(string value)
        {
            _client.BC_SearchRecordInDialogForm(value);
        }

        /// <summary>
        /// Opens any link based on text
        /// </summary>
        /// <param name="keyword"></param>
        public void OpenLinkedText(string keyword)
        {
            _client.ClickElement("//a[text()='" + keyword + "']");
        }

        /// <summary>
        /// Retrieves the autogenerated entity number from the header of the current form.
        /// </summary>
        /// <returns></returns>
        public string GetEntityNoFromHeader()
        {
            return _client.BC_GetEntityNoFromHeader();
        }

        /// <summary>
        /// Retrieves value from a field located in a section 
        /// </summary>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        /// <returns></returns>
        public string GetField(string sectionName, string fieldName)
        {
            return _client.BC_GetField(sectionName, fieldName);
        }

        /// <summary>
        /// Retrieves value from a generic field, not located in a section. 
        /// </summary>
        /// <param name="fieldName"></param>
        /// <returns></returns>
        public string GetField(string fieldName)
        {
            return _client.BC_GetField(fieldName);
        }

        /// <summary>
        /// Clicks the New button on the command bar for an entity. 
        /// </summary>
        public void New()
        {
            _client.BC_New();
        }

        /// <summary>
        /// Sets the value of a field located in a section
        /// </summary>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldValue"></param>
        public void SetField(string sectionName, string fieldName, string fieldValue)
        {
            _client.BC_SetField(sectionName, fieldName, fieldValue);
        }

        public void AppendInputField(string sectionName, string fieldName, string fieldValue)
        {
            _client.BC_AppendInputField(sectionName, fieldName, fieldValue);
        }

        /// <summary>
        /// Sets the value of a field, not located in a section. 
        /// </summary>
        /// <param name="fieldName"></param>
        /// <param name="fieldValue"></param>
        public void SetField(string fieldName, string fieldValue)
        {
            _client.BC_SetField(fieldName, fieldValue);
        }

        public void SetAdditionalLineComment(string lineNumber, string additionalComment)
        {
            _client.BC_SetAdditionalLineComment(lineNumber, additionalComment);
        }

        /// <summary>
        /// Set a field inside a task/modal form
        /// </summary>
        /// <param name="fieldName"></param>
        /// <param name="fieldValue"></param>
        public void SetFieldOnTaskForm(string fieldName, string fieldValue)
        {
            _client.BC_SetFieldOnTaskForm(fieldName, fieldValue);
        }

        /// <summary>
        /// Clicks the linked/anchored value under a given line and column name
        /// </summary>
        /// <param name="line"></param>
        /// <param name="column"></param>
        public void ClickLinkedValueUnderColumn(int line, string column)
        {
            string RowValue = _client.BC_GetLineField(line, column);
            _client.ThinkTime(1000);
            if (RowValue != "" || RowValue != null)
            {
                _client.ClickElement("//a[text()='" + RowValue + "']");
            }
            else
            {
                _client.ClickElement("//td[@controlname='" + column + "']/a[contains(@title, 'Open details') and @aria-label='(Blank)']");
            }
            _client.ThinkTime(1000);
        }

        public void ImportFileInField(string fileName, string fieldName)
        {
            _client.BC_ImportFileInField(fileName, fieldName);
        }

        /// <summary>
        /// Enters a field and leaves it using Tab so it can be autopopulated by the D365 BC 
        /// </summary>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        /// <returns></returns>
        public string AutocompleteField(string sectionName, string fieldName)
        {
            return _client.BC_AutocompleteField(sectionName, fieldName);
        }

        /// <summary>
        /// Find the field in the specified section and clicks the links in it.
        /// </summary>
        /// <param name="sectionName"></param>
        /// <param name="fieldName"></param>
        public void ClickLinkInField(string sectionName, string fieldName)
        {
            _client.BC_ClickLinkInField(sectionName, fieldName);
        }

        public void UnfoldSection(string sectionName)
        {
            _client.BC_UnfoldSection(sectionName);
        }

        /// <summary>
        /// Sets the value for the specified column in the specified line number.
        /// </summary>
        /// <param name="lineNumber">Line(row) number</param>
        /// <param name="lineFieldName">Field(column) name</param>
        /// <param name="lineFieldValue">Value to be set</param>
        public void SetLineField(int lineNumber, string lineFieldName, string lineFieldValue)
        {
            _client.BC_SetLineField(lineNumber, lineFieldName, lineFieldValue);
        }
        public void EnterDetailsInGISAddresses(string header, string value)
        {
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.GISAddressesHeader].Replace("[HEADER]", header), value + Keys.Tab);
            _client.ThinkTime(3000); //Wait table to load
        }

        public void EnterF8InFieldToCopyValueFSLID()
        {
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.GridFSLIDInput]);
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.GridFSLIDInput], "" + Keys.F8);
            _client.ThinkTime(1000); //Wait table to load
        }

        public void selectFirstEntryInGSIAddresses()
        {
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.GISFSLIDFirstEntry]);
        }

        public void clickEllipsis(string lineFieldName)
        {
            _client.BC_ClickEllipsis(lineFieldName);
        }

        /// <summary>
        /// Sets the value for the specified column in the specified line number.
        /// </summary>
        /// <param name="lineFieldName">Field(column) name</param>
        /// <param name="lineFieldValue">Value to be set</param>
        public void SendKeyLineField(string lineFieldName, string lineFieldValue)
        {

            switch (lineFieldName)
            {
                case "Type":
                    _client.BC_SelectDropdownLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.GridInputType]);
                    break;
                case "No.":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.GridInputNo]);
                    break;
                case "Item Reference No.":
                    break;
                case "Description":
                    break;
                case "Location Code":
                    break;
                case "Quantity":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.GridInputQuantity]);
                    break;
                case "Qty. to Assemble to Order":
                    break;
                case "Resereved Quantity":
                    break;
                case "Unit of Measure Code":
                    break;
                case "Unit Price Excl. GST":
                    break;
                case "US Tax Area Code":
                    break;
                case "Qty. to Ship":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.GridInputQtyToShip]);
                    break;
                case "Quantity Shipped":
                    break;
                case "Qty. to Invoice":
                    break;
                default:

                    throw new Exception("Unable to locate header title: " + lineFieldName);
            }
        }

        /// <summary>
        /// Sets the value for the specified column in the specified line number.
        /// </summary>
        /// <param name="lineFieldName">Field(column) name</param>
        /// <param name="lineFieldValue">Value to be set</param>
        public void SendKeyLineFieldCalculateAndPostGstSettlement(string lineFieldName, string lineFieldValue)
        {

            switch (lineFieldName)
            {
                case "Starting Date":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.OptionsStartingDate]);
                    break;
                case "Ending Date":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.OptionsEndingDate]);
                    break;
                case "Posting Date":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.OptionsPostingDate]);
                    break;
                case "Document No.":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.OptionsDocumentNo]);
                    break;
                case "Settlement Account":
                    _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.OptionsSettlementAccount]);
                    _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.OptionsDocumentNo]);
                    break;
                case "Post":
                    bool isElementVisible = false;
                    try
                    {
                        isElementVisible = WaitForElementToAppearNoConcatenation(AppElements.Xpath[AppReference.BusinessCentral.OptionsPostON]);
                    }
                    catch (Exception e)
                    {
                        // No need to handle Exception
                    }

                    if (lineFieldValue.Equals("ON") && !isElementVisible)
                    {
                        _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.OptionsPostON]);
                    }
                    else if (lineFieldValue.Equals("OFF") && isElementVisible)
                    {
                        _client.BC_SendKeyLineField(lineFieldValue, AppElements.Xpath[AppReference.BusinessCentral.GridInputNo]);
                    }
                    break;
                default:

                    throw new Exception("Unable to locate header title: " + lineFieldName);
            }

        }

        /// <summary>
        /// Sets the value for the specified column in the specified line number.
        /// </summary>
        /// <param name="lineFieldName">Field(column) name</param>
        /// <param name="lineFieldValue">Value to be set</param>
        public void VerifyPostedSalesInvoiceDimensionCode(string lineFieldName, string lineFieldValue)
        {

            switch (lineFieldName)
            {
                case "Dimension Code":
                    _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.DimensionCode].Replace("[VALUE]", lineFieldValue));
                    break;
                case "Dimension Value Code":
                    _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.DimensionValueCode].Replace("[VALUE]", lineFieldValue));
                    break;
                case "Dimension Value Name":
                    _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.DimensionValueName].Replace("[VALUE]", lineFieldValue));
                    break;
                default:

                    throw new Exception("Unable to locate header title: " + lineFieldName);
            }

        }

        /// <summary>
        /// Clicks on the specified line context menu option.
        /// </summary>
        /// <param name="lineNumber"></param>
        /// <param name="optionName"></param>
        public void ClickElementButton(String button)
        {
            _client.ClickElementButton(button);
        }

        public void ClickElementButtonWithContainName(String button)
        {
            _client.ClickElementButtonWithContainName(button);
        }
        public void ClickCollapseFactBox()
        {
            _client.ThinkTime(1000);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.CollapseFactBoxPane]);
        }

        /// <summary>
        /// Clicks on the specified line context menu option.
        /// </summary>
        /// <param name="lineNumber"></param>
        /// <param name="optionName"></param>
        public void ChooseLineOption(int lineNumber, string optionName)
        {
            _client.BC_ChooseLineOption(lineNumber, optionName);
        }

        /// <summary>
        /// Clicks on the specified line context menu option, in the specified table.
        /// </summary>
        /// <param name="lineNumber"></param>
        /// <param name="optionName"></param>
        /// <param name="tableName"></param>
        public void ChooseLineOption(int lineNumber, string optionName, string tableName)
        {
            _client.BC_ChooseLineOption(lineNumber, optionName, tableName);
        }

        /// <summary>
        /// Clicks the menu and then the submenu
        /// </summary>
        /// <param name="menu"></param>
        /// <param name="subMenu"></param>
        public void ClickMenuAndSubMenu(string menu, string subMenu)
        {
            _client.BC_ClickMenu(menu, subMenu);
        }

        public void ClickPostSubMenu(string postSubMenu)
        {
            _client.BC_ClickPostSubMenu(postSubMenu);
        }

        /// <summary>
        /// Retrieves the value of specified column in the specified line number
        /// </summary>
        /// <param name="lineNumber"></param>
        /// <param name="lineFieldName"></param>
        /// <returns></returns>
        public string GetLineField(int lineNumber, string lineFieldName)
        {
            return _client.BC_GetLineField(lineNumber, lineFieldName);
        }

        /// <summary>
        /// Retrieves the number of lines. Not as safe as the same method for retrieving number of lines for a specified table name.
        /// </summary>
        /// <returns></returns>
        public int GetNumberOfLines()
        {
            return _client.BC_GetNumberOfLines();
        }
        /// <summary>
        /// Retrieves the number of lines for a specified table name.
        /// </summary>
        /// <param name="tableName"></param>
        /// <returns></returns>
        public int GetNumberOfLines(string tableName)
        {
            return _client.BC_GetNumberOfLines(tableName);
        }

        /// <summary>
        /// Clicks menu "Request Approval">"Send Approval Request" and confirms all dialog messages.
        /// </summary>
        /// <returns></returns>
        public bool SendApprovalRequest()
        {
            _client.BC_ClickMenu("Request Approval", "Send Approval Request");

            if (_client.BC_Dialog_GetText().Value.Contains("Do you want to update"))
            {
                _client.ThinkTime(1000); //TODO: performance improvements
                _client.BC_Dialog_ClickButton("Yes");
            }
            if (_client.BC_Dialog_GetText().Value.Contains("An approval request has been sent"))
            {
                _client.ThinkTime(1000); //TODO: performance improvements
                _client.BC_Dialog_ClickButton("OK");
            }
            return true;
        }

        /// <summary>
        /// Clicks menu "Print/Send">"Send..." and fills the dialog window for sending email using the provided email address.
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        public bool EmailVendor(string email)
        {
            _client.BC_ClickMenu("Print/Send", "Send...");
            _client.ThinkTime(1000);
            return _client.BC_EmailVendor(email);
        }

        /// <summary>
        /// Clicks menu "Prepare">"Copy Document..." and fills the Copy Sales Document window using the provided Document Type and Document No.
        /// </summary>
        /// <param name="documentType"></param>
        /// <param name="documentNo"></param>
        /// <returns></returns>
        public bool CopyDocument(string documentType, string documentNo)
        {
            _client.BC_ClickMenu("Prepare", "Copy Document...");
            return _client.BC_CopySalesDocument(documentType, documentNo);
        }

        /// <summary>
        /// Clicks menu "Prepare">"Copy Document...".
        /// </summary>
        /// <returns></returns>
        public bool CopyDocument()
        {
            _client.BC_ClickMenu("Prepare", "Copy Document...");
            return true;
        }

        /// <summary>
        /// Clicks menu "Posting">"Post" and confirms all dialog messages.
        /// </summary>
        /// <returns></returns>
        /// 
        public void PostAndNotOpen()
        {
            _client.BC_ClickMenu("Home", "Post");
            _client.ThinkTime(1000);
            if (_client.BC_Check_DialogText("Do you want to post the"))
            {
                _client.ThinkTime(1000);
                _client.BC_Dialog_ClickButton("Yes");
            }
            _client.ThinkTime(2000);
            _client.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.Modal_WorkingOnIt_Window]);
        }

        public void ProcessPostBankAR()
        {
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.ARPost]);
            _client.ClickElementButton("Yes");
            _client.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.Modal_WorkingOnIt_Window]);
            _client.ClickElementButton("No");
            _client.ThinkTime(1000);
        }

        public string getDocumentNumber(string xpath)
        {

            string docNum = _client.getElementText(xpath);
            int startIndex = docNum.IndexOf("PPI");

            if (startIndex != -1)
            {
                // Extract the substring starting from "PPI"
                return docNum.Substring(startIndex, 10); // Assuming the invoice number has a fixed length of 10 characters
            }

            return string.Empty;
        }

        public string getDocumentNumberInvoice(string xpath)
        {

            string docNum = _client.getElementText(xpath);
            int startIndex = docNum.IndexOf("PPI");

            if (startIndex != -1)
            {
                // Extract the substring starting from "PPI"
                return docNum.Substring(startIndex, 11); // Assuming the invoice number has a fixed length of 10 characters
            }

            return string.Empty;
        }


        public string getDocumentNumberCreditMemo(string xpath)
        {
            string docNum = _client.getElementText(xpath);
            int startIndex = docNum.IndexOf("PSC");

            if (startIndex != -1)
            {
                // Extract the substring starting from "PSC" and containing the next 9 characters
                return docNum.Substring(startIndex, 9);
            }

            return string.Empty;
        }

        public void ClickButtonInModal(string button)
        {
            _client.ClickElement("//button/span[text()='" + button + "']");

        }

        public void WaitForElementToAppear(string xpath)
        {
            _client.WaitForElementToAppear("//button/span[text()='" + xpath + "']");

        }

        public void FluentWaitForElementToAppear(string xpath)
        {
            _client.FluentWaitForElementToAppear(xpath);

        }

        public void WaitForElementToDisappear(string xpath)
        {
            _client.WaitForElementToDisappear(xpath);

        }

        public bool WaitForElementToAppearNoConcatenation(string xpath)
        {
            return _client.WaitForElementToAppearReturnBoolean(xpath);

        }

        public void PostViaHomeNav(bool openAfterPosting)
        {
            _client.BC_PostViaHomeNav();
            _client.ThinkTime(1000);
      
            if (_client.BC_Dialog_GetText().Value.Contains("Do you want to post the"))
            {
                _client.ThinkTime(1000);
                _client.BC_Dialog_ClickButton("Yes");
            }

            _client.ThinkTime(1000);

            if (openAfterPosting && _client.BC_Dialog_GetText().Value.Contains("Do you want to open the posted"))
            {
                _client.ThinkTime(1000);
                _client.BC_Dialog_ClickButton("Yes");
            }

            _client.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.Modal_WorkingOnIt_Window]);
        }

        /// <summary>
        /// Clicks menu "Posting">"Post..", in dialog window sets desired radio button option and confirms all dialog messages.
        /// </summary>
        /// <param name="optionName">Radio button option.</param>
        /// <returns></returns>
        public bool PostWithOption(string optionName)
        {
            _client.BC_PostViaHomeNav();
            _client.ThinkTime(2000);
            _client.BC_Dialog_SetRadioButton(optionName);
            _client.ThinkTime(1000);
            _client.BC_Dialog_ClickButton("OK");
            _client.ThinkTime(1000);
            _client.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.Modal_WorkingOnIt_Window]);
            return true;
        }

        /// <summary>
        /// Clicks menu "Vendor">"Ledger Entries".
        /// </summary>
        /// <returns></returns>
        public bool OpenVendorLedgerEntries()
        {
            _client.BC_ClickMenu("Vendor", "Ledger Entries");
            return true;
        }

        /// <summary>
        /// Clicks menu "Customer">"Ledger Entries".
        /// </summary>
        /// <returns></returns>
        public bool OpenCustomerLedgerEntries()
        {
            return _client.BC_ClickMenu("Customer", "Ledger Entries");
        }

        /// <summary>
        /// Clicks menu "Process">"Suggest Lines..." and fills the window Suggest Bank Acc Recon Lines using the 1st January of current year as the Starting Date.
        /// </summary>
        /// <returns></returns>
        public bool GenerateSuggestedLines()
        {
            _client.BC_ClickMenu("Home", "Suggest Lines...");
            return _client.BC_SuggestBankAccReconLines();
        }

        /// <summary>
        /// Retrieves a text from a Dialog Message.
        /// </summary>
        /// <returns></returns>
        public string GetDialogMessage()
        {
            return _client.BC_Dialog_GetText().Value;
        }

        /// <summary>
        /// Retrieves a text from a Exception Dialog Message.
        /// </summary>
        /// <returns></returns>
        public string GetExceptionDialogMessage()
        {
            return _client.BC_ExceptionDialog_GetText().Value;
        }

        /// <summary>
        /// Clicks a button (works for any window).
        /// </summary>
        /// <param name="buttonName"></param>
        /// <returns></returns>
        public bool Dialog_ClickButton(string buttonName)
        {
            return _client.BC_Dialog_ClickButton(buttonName);
        }

        /// <summary>
        /// Throws NoSuchElementException if specified column is not completely empty.
        /// Warning: this isn't a proper way of performing the test assertion.
        /// </summary>
        /// <param name="columnName"></param>
        /// <returns></returns>
        public bool CheckColumnEmpty(string columnName)
        {
            return _client.BC_CheckColumnEmpty(columnName);
        }

        /// <summary>
        /// Throws NoSuchElementException if specified columns don't have the same values.
        /// Warning: this isn't a proper way of performing the test assertion.
        /// </summary>
        /// <param name="givenColumn"></param>
        /// <param name="columnToCheck"></param>
        /// <returns></returns>
        public bool CheckColumnsHaveSameValues(string givenColumn, string columnToCheck)
        {
            return _client.BC_CheckColumnsHaveSameValues(givenColumn, columnToCheck);
        }

        /// <summary>
        /// Throws NoSuchElementException if specified line/row/record doesn't have the same value in provided two columns/fields.
        /// </summary>
        /// <param name="givenColumn"></param>
        /// <param name="columnToCheck"></param>
        /// <param name="line"></param>
        /// <returns></returns>
        public bool CheckColumnsHaveSameValuesInLine(string givenColumn, string columnToCheck, string line)
        {
            return _client.BC_CheckColumnsHaveSameValues(givenColumn, columnToCheck, line);
        }

        /// <summary>
        /// Clicks menu "Related">"Documents">documentsOption
        /// </summary>
        /// <param name="documentsOption"></param>
        /// <returns></returns>
        public bool NavigateToDocumentsAndSelect(string documentsOption)
        {
            return _client.BC_ClickMenu("Order", "Receipts");
        }

        /// <summary>
        /// Clicks menu "More options">"Functions">Undo Receipt">function.
        /// </summary>
        /// <param name="function"></param>
        /// <returns></returns>
        public bool SelectOptionFunction(string function)
        {
            return _client.BC_ClickLineMenuAndSubmenu("More options", "Functions", "Undo Receipt", function);
        }

        /// <summary>
        /// Clicks menu "Reject", sets the radio button to "Reject" and clicks "OK".
        /// </summary>
        /// <returns></returns>
        public bool RejectApprovalRequest()
        {
            _client.BC_ClickMenu("Reject");
            _client.BC_Dialog_SetRadioButton("Reject");
            _client.BC_Dialog_ClickButton("OK");
            return true;
        }

        /// <summary>
        /// Confirms rejecting the approval request (clicks "OK" button" on two dialog messages.)
        /// </summary>
        /// <returns></returns>
        public bool ConfirmRejectingApprovalRequest()
        {
            _client.BC_Dialog_ClickButton("OK");
            _client.ThinkTime(1000); // TODO: Performance improvements
            _client.BC_Dialog_ClickButton("OK");
            return true;
        }

        /// <summary>
        /// Clicks menu "Approve".
        /// </summary>
        /// <returns></returns>
        public bool AcceptApprovalRequest()
        {
            _client.BC_ClickMenu("Approve");
            return true;
        }

        /// <summary>
        /// Click back button to seal changes
        /// </summary>
        public void ClickBackButton()
        {
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.BackButton]);
        }

        /// <summary>
        /// Clicks the top right menu button "Show filter pane", selects request filter field and filters using the provided filter value.
        /// </summary>
        /// <param name="filterField"></param>
        /// <param name="filterValue"></param>
        /// <returns></returns>
        public bool FilterRecords(string filterField, string filterValue)
        {
            _client.ThinkTime(2000);
            _client.BC_ClickTopRightMenuButton("Show filter pane");
            _client.BC_FilterRecords(filterField, filterValue);
            return true;
        }


        /// <summary>
        /// Focuses/Expands the grid and filters the records
        /// </summary>
        /// <param name="filterField"></param>
        /// <param name="filterValue"></param>
        public void FilterRecordOnFocusedGrid(string filterField, string filterValue)
        {
            _client.ThinkTime(1000);
            _client.BC_ClickTopRightGridButton("Enter focus mode for this part");
            _client.BC_ClickTopRightGridButton("Show filter pane");
            _client.BC_FilterRecords(filterField, filterValue);
        }

        public void ClickTopRightGridBtnByText(string text)
        {
            try
            {
                _client.BC_ClickTopRightGridButton(text);
            }
            catch
            {
                //ignore if not available
            }
        }

        /// <summary>
        /// Clicks on the toggle switch 'Follow Workflow Hierarchy'.
        /// </summary>
        /// <returns></returns>
        public bool ToggleFollowWorkflowHierarchyButton()
        {
            _client.BC_ToggleFollowWorkflowHierarchyButton();
            return true;
        }

        /// <summary>
        /// Clicks menu "Actions">"Functions">"Apply Entries...". Then, in the 'Apply Vendor Entries' window, applies Vendor Entry for the row with the provided Document No. 
        /// </summary>
        /// <param name="documentNo"></param>
        /// <returns></returns>
        public bool ApplyVendorEntries(string documentNo)
        {
            _client.BC_ClickMenu("Home", "Apply Entries...");
            _client.BC_ApplyVendorEntry(documentNo);
            return true;
        }

        public bool PostPrePaymentInvoice()
        {

            _client.BC_ClickMenu("Actions", "Posting", "Prepayment", "Post Prepayment Invoice...");
            return true;
        }

        public void ClickItemUnderMoreOptions(string menuItem)
        {
            _client.BC_ClickMenu("Actions", "Functions", "Drop Shipment", menuItem);
        }

        public void VerifyPostedPurchaseInvoiceSuccessfulWindowIsDisplayed()
        {
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.ModalInvoiceIsPostedAsNumber]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.Yes]);
            _client.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.ModalInvoiceIsPostedAsNumber]);
        }

        /// <summary>
        /// Gets value of 'Applies-to-ID' field for provided Document No.
        /// </summary>
        /// <param name="documentNo"></param>
        /// <returns></returns>
        public string ApplyVendorEntries_GetAppliesToId(string documentNo)
        {
            return _client.BC_ApplyVendorEntry_GetAppliesToId(documentNo).Value;
        }

        /// <summary>
        /// Adds new recurring additional charge when customer no. does not exist.
        /// Otherwise, it updates the line instead
        /// </summary>
        /// <param name="data"></param>
        public void AddRecurringAC(string data)
        {
            bool DataDeleted = _client.BC_PerformWhenDataExistsInLines("Customer No.", data, "delete");
            if (DataDeleted)
            {
                _client.BC_SearchForPageWithType("Recurring Additional Charges", "Lists");
            }
            _client.ThinkTime(1000);
            _client.BC_ClickMenu("New");
        }

        public void DeleteSuggestedConnectionBilling(string customerNo)
        {
            bool DataDeleted = _client.BC_PerformWhenDataExistsInLines("Customer No.", customerNo, "delete line");
            if (DataDeleted)
            {
                try
                {
                    _client.BC_Dialog_ClickButton("Yes");
                }
                catch (Exception ex)
                {
                    Log.Info("Skip delete " + ex.Message);
                }
            }
        }
        public void UpdateStatementBalance()
        {

            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.TextTotalBalance]);
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.InputStatementEndingBalance],
            _client.getElementText(AppElements.Xpath[AppReference.BusinessCentral.TextTotalBalance]));
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.BackButton]);
        }

        public void EnterSearchServiceID(string serviceID)
        {
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.ConnectionsSearchServiceId], serviceID);
        }

        public void ClickButtonShowTheRest()
        {
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.ConnectionsShowTheRest]);
        }

        public string ConnectionOneOffProductsWindowIsDisplayed()
        {
            _client.FluentWaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.ConnectionsOneOffProductsList]);
            string actual =
            _client.getElementText(AppElements.Xpath[AppReference.BusinessCentral.BC_ConnectionsEntryNoLastCount]);
            return actual;
        }

        public void ConnectionNewOneOffEntryNoIsDisplayed(string expected)
        {
            int actualValue;
            int expectedValue;
            string actual = _client.getElementText(AppElements.Xpath[AppReference.BusinessCentral.BC_ConnectionsEntryNoLastCount]);
            if (int.TryParse(actual, out actualValue) && int.TryParse(expected, out expectedValue) && (expectedValue) == actualValue)
            {
                Console.WriteLine("Passed");
            }
            else
                throw new Exception("Actual vs Expected Failed");

        }

        //============== <TEMPDEV for Assurity Cloud> ====================

        public void TEMP_OpenUrl()
        {
            string UrlFromGithubSecret = Environment.GetEnvironmentVariable("TEMPORARY_FOR_TESTING_GOOGLE_URL");
            if (UrlFromGithubSecret == null || UrlFromGithubSecret.IsEmptyValue())
            {
                throw new Exception("UrlFromGithubSecret is empty");
            }
            _client.TEMP_OpenUrl(UrlFromGithubSecret);
        }

        public void TEMP_OpenUrl(string url)
        {
            _client.TEMP_OpenUrl(url);
        }

        public void TEMP_SearchFor(string searchValue)
        {
            _client.TEMP_SearchFor(searchValue);
        }

        public string TEMP_GetSearchSummary()
        {
            return _client.TEMP_GetSearchSummary().Value;
        }

        public void SearchForDocumentNumberVendorLedgerEntries(string docNum)
        {
            _client.ThinkTime(2000);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.VLE_SearchIcon]);
            _client.ThinkTime(2000);
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.VLE_InputBox], docNum);
        }

        public void DownloadFile()
        {
            _client.DownloadFile();
        }


        public void ClickPrintSend()
        {
            _client.FluentWaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.PSI_PrintSend]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_PrintSend]);
        }

        public void AttachAsPDF()
        {
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.PSI_AttachAsPDF]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_AttachAsPDF]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.PSI_ShowAttachments]);
        }

        public void SendEmail()
        {

            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.PSI_PrintSend]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_PrintSend]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.PSI_Email]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_Email]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.PSI_Email_Details_title]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_Message]);
            _client.ThinkTime(1000);
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_Message_field], "Please disregard this email, as it has been automatically generated by our Automation Framework.");
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.PSI_Send_Email]);

        }


        public void ImportFileFromExcel(string fileName, string templateCode)
        {
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Process]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.GJ_Process]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Import_From_Excel]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.GJ_Import_From_Excel]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Edit_General_Journal_title]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Template_Code_field]);
            _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.GJ_Template_Code_field], templateCode);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Ellipsis_Excel_filename]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.GJ_Ellipsis_Excel_filename]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Button_Choose]);

            string currentWorkingDirectory = Directory.GetCurrentDirectory();
            string searchString = "Enable";

            int index = currentWorkingDirectory.LastIndexOf(searchString, StringComparison.OrdinalIgnoreCase);

            if (index >= 0)
            {
                // Construct the new path using Path.Combine
                string projectDirectory = currentWorkingDirectory.Substring(0, index + searchString.Length);
                string newPath = Path.Combine(projectDirectory, "Uploads", fileName + ".xlsx");
                _client.SendKeyToElement(AppElements.Xpath[AppReference.BusinessCentral.GJ_Button_Choose], newPath);
            }
            else
            {
                Console.WriteLine("The word 'Enable' was not found in the path.");
            }
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.OK]);
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Message_The_Import_Completed_Successfully]);
            _client.ClickElement(AppElements.Xpath[AppReference.BusinessCentral.OK]);
            _client.WaitForElementToDisappear(AppElements.Xpath[AppReference.BusinessCentral.GJ_Message_The_Import_Completed_Successfully]);


        }

        public void ThinkTimeinSeconds(int seconds)
        {
            _client.ThinkTime(1000 * seconds);
        }

        public void WaitForWorkingOnItWindowToDissapear()
        {
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.Modal_WorkingOnIt_Window]);
        }

        public void WaitForYouCannotPostIsDisplayed()
        {
            _client.WaitForElementToAppear(AppElements.Xpath[AppReference.BusinessCentral.Modal_You_Cannot_Post]);
        }


        public void VerifyQuantityReceived(string expectedQuantity)
        {
            ThinkTimeinSeconds(2);


            if (string.IsNullOrEmpty(expectedQuantity))
            {
                throw new ArgumentException("The expected quantity cannot be null or empty.", nameof(expectedQuantity));
            }

            string actualQuantityReceived = _client.getElementGridValue(AppElements.Xpath[AppReference.BusinessCentral.Purchase_Order_Line_Quantity_Received_Unedited]);

            if (!string.Equals(actualQuantityReceived, expectedQuantity, StringComparison.OrdinalIgnoreCase))
            {
                throw new InvalidOperationException($"Quantity received does not match. Expected: {expectedQuantity}, Actual: {actualQuantityReceived}");
            }
        }

        public void VerifyFSLID(string expectedValue)
        {
            ThinkTimeinSeconds(2);


            if (string.IsNullOrEmpty(expectedValue))
            {
                throw new ArgumentException("The expected quantity cannot be null or empty.", nameof(expectedValue));
            }

            string actualValue = _client.BC_GetLineField(1, "FSL ID");
            if (!string.Equals(actualValue, expectedValue, StringComparison.OrdinalIgnoreCase))
            {
                throw new InvalidOperationException($"FSL ID value does not match. Expected: {expectedValue}, Actual: {actualValue}");
            }
        }

        public void VerifyFSLIDIsInvalid()
        {
            bool found = false;
            ThinkTimeinSeconds(2);
            found = _client.AssertElementIsDisplayed(AppElements.Xpath[AppReference.BusinessCentral.FSLIDInvalidError]);

            if (!found)
            {
                throw new Exception("FSL ID invalid error message not found.");
            }
        }

        public void VerifyFSLAddress(string expectedValue)
        {
            ThinkTimeinSeconds(3);


            if (string.IsNullOrEmpty(expectedValue))
            {
                throw new ArgumentException("The expected quantity cannot be null or empty.", nameof(expectedValue));
            }

           string actualValue = _client.BC_GetLineField(1, "FSL Address");
            if (!string.Equals(actualValue, expectedValue, StringComparison.OrdinalIgnoreCase))
            {
                throw new InvalidOperationException($"FSLAddress does not match. Expected: {expectedValue}, Actual: {actualValue}");
            }
        }

        public void VerifyItemInStock(string itemNumber, string url, string CurrentItemInventoryStock)
        {
            _client.VerifyItemInStock(itemNumber, url, CurrentItemInventoryStock);
        }
        public string VerifyItemCurrentStock(string itemNumber, string url)
        {
            return _client.VerifyItemCurrentStock(itemNumber, url);
        }

        public void VerifyAmount(string amount, string docNum)
        {
            _client.VerifyFirstItemVendorLedgerEntriesAmount(amount, docNum);
        }


        //============== </TEMPDEV for Assurity Cloud> ====================


        //============== <API Testing> ====================
        public static async Task TestAPI(string endpoint)
        {
          
            var response = await client.GetAsync(endpoint);
            response.EnsureSuccessStatusCode();

            string responseBody = await response.Content.ReadAsStringAsync();
            //Console.WriteLine("RESPONSE BODY: " + responseBody);
            Console.WriteLine("RESPONSE STATUS CODE: " + response);

            //var headerValue = response.Headers.GetValues("Custom-Header").FirstOrDefault();
            Console.WriteLine("Response Headers:");
            foreach (var header in response.Headers)
            {
                Console.WriteLine($"{header.Key}: {string.Join(", ", header.Value)}");
            }
        }

        public static Task TestAPI()
        {
            throw new NotImplementedException();
        }
    }
}
